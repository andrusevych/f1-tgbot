import json
import asyncio
import nest_asyncio
import os
import socket
import threading
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —Ç–∞ chat_id –∑ config.json


BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))

# –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –≥–æ–Ω–∫—É –∑ races.json
def get_next_race_details():
    try:
        with open("races.json", "r", encoding="utf-8") as file:
            races = json.load(file)

        today = datetime.utcnow().date()

        for race in races:
            race_date = datetime.strptime(race["date"], "%Y-%m-%d").date()
            if race_date >= today:
                return {
                    "name": race["raceName"],
                    "date": race_date,
                    "date_str": race["date"],
                    "time": race["time"],
                    "circuit": race["Circuit"]["circuitName"],
                    "location": f"{race['Circuit']['Location']['locality']}, {race['Circuit']['Location']['country']}",
                }

        return None
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –≥–æ–Ω–æ–∫: {e}")
        return None

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≥–æ–Ω–∫–∞ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è
def get_race_this_week():
    today = datetime.utcnow().date()
    monday = today - timedelta(days=today.weekday())
    sunday = monday + timedelta(days=6)

    with open("races.json", "r", encoding="utf-8") as file:
        races = json.load(file)

    for race in races:
        race_date = datetime.strptime(race["date"], "%Y-%m-%d").date()
        if monday <= race_date <= sunday:
            return race

    return None

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–¥–∞—î bot)
async def send_weekly_poll(context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot  # Get bot instance correctly
    race = get_race_this_week()
    if race:
        question = f"üèÅ –ß–∏ –±—É–¥–µ—à —Ç–∏ –¥–∏–≤–∏—Ç–∏—Å—å {race['raceName']} —Ü—ñ—î—ó –Ω–µ–¥—ñ–ª—ñ?"
        options = ["–¢–∞–∫, –±—É–¥—É! ‚úÖ", "–ù—ñ, –Ω–µ –±—É–¥—É("]
        await bot.send_poll(
            chat_id=GROUP_CHAT_ID,
            question=question,
            options=options,
            is_anonymous=False,
            allows_multiple_answers=False
        )
        print(f"üì§ –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–ª—è –≥–æ–Ω–∫–∏: {race['raceName']}")
    else:
        print("‚ÑπÔ∏è –¶—å–æ–≥–æ —Ç–∏–∂–Ω—è –Ω–µ–º–∞—î –≥–æ–Ω–∫–∏ ‚Äî –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")


# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def format_race_info(race):
    if race is None:
        return "üö´ –í—Å—ñ –≥–æ–Ω–∫–∏ –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Ü—å–æ–≥–æ —Å–µ–∑–æ–Ω—É."
    return (
        f"üèÅ –ù–∞—Å—Ç—É–ø–Ω–∞ –≥–æ–Ω–∫–∞: {race['name']}\n"
        f"üìç {race['circuit']} ({race['location']})\n"
        f"üìÖ –î–∞—Ç–∞: {race['date_str']}\n"
        f"üïî –ß–∞—Å: {race['time']}"
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üèéÔ∏è –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –≥–æ–Ω–∫—É", callback_data="next_race")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –≥–æ–Ω–∫—É:",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /next
async def next_race(update: Update, context: ContextTypes.DEFAULT_TYPE):
    race = get_next_race_details()
    race_info = format_race_info(race)
    await update.message.reply_text(race_info)

# –ö–æ–º–∞–Ω–¥–∞ /poll
async def manual_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        print("‚úÖ /poll command received")  # Debug print
        race = get_race_this_week()
        if race:
            question = f"üèÅ –ß–∏ –±—É–¥–µ—à —Ç–∏ –¥–∏–≤–∏—Ç–∏—Å—å {race['raceName']} —Ü—ñ—î—ó –Ω–µ–¥—ñ–ª—ñ?"
            options = ["–¢–∞–∫, –±—É–¥—É! ‚úÖ", "–ù—ñ, –Ω–µ –±—É–¥—É("]
            await context.bot.send_poll(
                chat_id=GROUP_CHAT_ID,
                question=question,
                options=options,
                is_anonymous=False,
                allows_multiple_answers=False
            )
        else:
            await update.message.reply_text("üö´ –¶—å–æ–≥–æ —Ç–∏–∂–Ω—è –Ω–µ–º–∞—î –≥–æ–Ω–∫–∏ ‚Äî –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –±—É–¥–µ.")
    except Exception as e:
        print(f"‚ùå Error in manual_poll: {e}")


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "next_race":
        race = get_next_race_details()
        race_info = format_race_info(race)
        await query.edit_message_text(race_info)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).concurrent_updates(True).build()
    
    if app is None:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ.")
        return  # –í–∏—Ö—ñ–¥ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó

    # –§–µ–π–∫ –ø–æ—Ä—Ç –¥–ª—è Render
    def fake_port():
        s = socket.socket()
        s.bind(("", 10000))
        s.listen(1)
        while True:
            conn, addr = s.accept()
            conn.close()

    threading.Thread(target=fake_port, daemon=True).start()

    # –û–±—Ä–æ–±–Ω–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next", next_race))
    app.add_handler(CommandHandler("poll", manual_poll))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        send_weekly_poll,
        trigger=CronTrigger(day_of_week="mon", hour=11, minute=30),
        args=[app]
    )
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    print(f"üîç Application object: {app}")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    nest_asyncio.apply()  # –î–æ–¥–∞—î–º–æ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ loop.run_until_complete()
    except RuntimeError as e:
        print(f"‚ùå RuntimeError: {e}")
